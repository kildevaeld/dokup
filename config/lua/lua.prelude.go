// Code generated by go-bindata.
// sources:
// dokup.lua
// DO NOT EDIT!

package lua

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dokupLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4d\x8f\xa4\x36\x10\xbd\xf7\xaf\x28\x79\x0f\x03\x1a\xba\xb5\x73\x8d\xc4\xde\xa2\xe4\x96\x43\x92\xd3\xcc\xa8\xe5\x86\x62\xb0\xa0\x6d\x64\x9b\xee\x74\x46\x93\xdf\x1e\xf9\x03\xb0\x81\x99\xb0\x9b\x55\x94\xd6\x6a\x07\xec\x72\xf9\xd5\xab\xf2\x2b\x53\xf5\xbc\xd0\x4c\x70\xe8\x24\xe3\xfa\xa8\xe9\xa9\xc5\x84\x8b\x12\xd3\x1d\x00\xc0\x7e\x0f\x5a\xc0\x99\x36\x08\xa2\xd7\x5d\xaf\xe1\x84\xb4\xd7\xac\xea\x5b\x3b\xdf\x8a\x82\xb6\x30\x3a\xd1\xf4\x94\xd0\xb3\x76\x6b\xa7\x79\xa5\x25\xe4\x40\xc8\x38\x5c\x09\x09\x2c\x7f\xc8\xe8\x59\x43\x29\xc6\x61\xf3\x73\xb6\xe6\xff\xc3\x01\xc8\x93\x9e\x16\x21\x2f\xc7\x67\x89\xba\x97\xdc\x98\xed\x86\xa9\x00\x4f\x41\x8b\x1a\x33\x50\x9a\x16\x4d\x36\x00\xcf\xe1\xf5\x2d\xb3\xff\x02\xcb\x12\x3b\x5d\x43\x0e\x0f\xc1\x98\xb3\x3f\x7a\xd0\xaf\x4f\x9c\x38\xdf\xd7\x9a\xb5\x08\x5a\xf6\x18\x62\xf6\x11\xb2\x3f\x11\x72\xf8\x1c\x45\xd8\x64\x17\x60\x1c\x3a\xca\xa4\x72\x9c\x2e\x82\x75\xcb\xec\x9f\x7b\x0f\x22\x8a\x27\x88\xa9\x97\x47\xc6\x4b\xfc\x63\x44\xbb\x7d\x1b\x56\x41\x62\x39\x79\x34\xd3\xcf\x90\xe7\xc0\x59\x9b\x82\x90\x90\x4c\x7e\xbf\xe4\x10\x18\xa5\xa0\x6b\xe4\xbb\xc8\xcf\xe0\x4b\x69\xc9\xf8\xcb\xa1\x62\xbc\x4c\x26\xb6\x32\xf2\x46\xb2\xe9\xf5\x87\x16\x79\x92\xa6\xde\xcf\xdc\x8d\xf9\x45\x44\x07\x2f\x26\xf1\x99\xa1\x7d\xbe\x00\x5b\x85\xac\x02\x2e\xf4\xfb\x18\x9e\xf8\xf7\x03\xb1\x8a\x21\x4c\xcd\xf0\xdb\xef\xe1\xb7\x9a\x29\x60\x0a\x38\x16\xa8\x14\x95\x37\x9b\x9b\xab\x90\x0d\xe3\x2f\x70\x65\xba\x86\x9f\x7f\xff\xe9\x47\xb0\x27\x4c\x81\xd0\x35\xca\x2b\x53\x08\x57\x04\xd9\x73\xb3\x35\x88\x0a\xce\x78\x16\xf2\x06\xbd\x32\xab\x0a\xc1\x0b\xaa\x41\x70\xa8\xfb\x17\x04\x17\xb2\x5a\xec\x6e\x5d\x1e\x18\x57\x28\xb5\xe7\x22\xa0\x20\x5d\xd8\xc7\x05\x4e\x96\xe1\xb8\x8a\x6b\xf0\xb6\x9a\x7d\x7d\xeb\x30\x69\x52\x53\x45\x84\xf7\xe7\x13\x4a\x62\x2a\x29\x1c\x3e\x09\xd1\x22\xe5\xe4\x03\xde\x1b\xbc\x99\xdd\x1f\xc9\xe1\xa0\x85\x8b\x2c\x69\xd2\xc3\x81\x3c\xaf\xe7\xfd\x43\x27\x77\x0b\x2f\x77\x6b\x6e\xd6\x52\x37\x46\x74\x59\x8f\xe8\xb2\x39\xa2\x0f\x2a\xc9\xe8\xa2\x95\x9a\xd4\xbc\x19\xd4\xa6\xbc\x0c\xf4\x00\xf7\x65\x99\x29\x5f\xf0\x11\x40\x9b\xed\xef\x8d\xe3\x75\xad\xd4\x61\x5e\x5b\x4e\x50\xa7\xee\xb0\xc1\x78\x25\x28\xf3\x8b\xd4\x68\xd2\xb6\xfb\x87\x55\xeb\x93\x44\xda\x6c\xaf\x8a\x6f\x21\xe0\x2e\xce\x84\xa9\xa0\xaf\x28\xa0\x40\x9c\x9d\x9a\x7f\xbb\xe0\x44\x28\xf7\x0f\x16\x27\x79\xfb\x8a\x33\xf1\xa1\xaa\xae\xc7\xf4\x8f\x7e\xf7\x7b\x28\x5a\xa1\xd0\x44\xe5\xb2\xfc\xbf\xa1\x61\x0e\x7f\x9e\xa2\xb0\x6f\x4e\xcf\xef\x36\x5b\xdb\xde\x6c\x57\xce\xe1\xf3\x0a\xfc\x7f\x09\x7b\xb1\xd7\x27\x7b\x4c\xe0\xcb\xea\x66\xe6\x7c\xd8\xcb\x10\x2d\x9a\x47\x67\xf9\x3c\xbb\x2c\x05\x33\x60\xbb\x7a\x34\x3f\x5c\x6f\x96\xcd\x1f\x28\x2f\xfd\xf4\x3d\x3c\x18\xb5\x73\x2f\xfb\x90\x98\x79\x29\xc4\xe7\x70\xa0\x7e\x8c\xe9\xbf\xef\x82\x5b\x3a\x5f\x94\x31\xb7\xc0\x79\xf4\x0b\x52\x07\xde\xde\x7f\x93\x70\xb1\x8d\x6b\x37\xbb\xe1\x32\x75\xac\x85\x68\x8e\x15\xc3\xb6\x4c\x38\x3d\x7b\x29\xf4\x17\x52\x33\x60\x55\xba\x93\xa8\x34\x95\xda\x36\x92\x78\x54\x74\x8b\xc1\x53\xcf\xda\x72\x31\x2a\xf1\x2c\x2e\x48\x3c\x90\x05\x14\x5a\x96\x1e\x46\xc9\x0a\x9d\xb9\x04\x66\xd6\x43\x06\xa2\x33\x36\xca\x81\xdb\xf9\x6a\x1b\x9d\x9b\x07\x12\xd7\x1b\xab\x5c\xbf\x1b\x16\xc2\x5f\x39\x10\xc7\x35\x59\x56\x26\x4a\x29\x64\x42\xcc\x4d\x8c\xfa\x8c\x90\x74\x51\x19\x3b\x98\x7a\xd8\x0a\x71\x1b\x00\x0c\xc1\xbe\x0b\xc1\x38\x3a\x1c\x08\xa8\x5a\xf4\x6d\x09\x27\x04\x3a\x32\x34\x43\x14\xa2\x19\x99\x28\xb1\x43\x5e\xfe\xc2\x63\xf2\xdd\x28\xf2\x82\xa1\xda\xc2\x93\xeb\xc9\xd6\x10\x36\x82\xf4\x6d\xfc\xfd\xd3\xe4\xb2\xdd\x22\x87\x1c\x3e\xd9\xdc\xda\x61\x7b\xe3\xc7\x5b\x76\xa1\xad\xb9\xf5\x33\x77\xed\xf7\x3d\x2d\xb8\xf7\x87\x80\xed\x35\x29\xb7\xbe\x16\x34\xb2\x0a\x8c\xab\x98\x8b\x55\xd5\xb6\x66\x33\x6e\x16\xda\x1b\xbe\x9b\xb2\x7c\xbc\xd0\xd6\x28\x93\xa7\x2b\xd2\x16\x56\x85\x26\x4e\x96\x16\x3b\x87\x4e\xfc\xa7\xdb\x9c\xae\x21\x5a\x7f\x50\xc6\x03\xa2\x50\x5e\x58\x81\x49\xc5\xd3\x5d\xf4\xcd\xa7\x0a\xc9\x2c\x9e\xc9\x67\xfc\x39\xe8\x07\x15\xea\x0a\xf9\x25\xa9\x78\x66\x9e\xcf\xa8\xa9\xfb\x40\x7e\x9d\x24\x03\x72\xf7\xd7\x8e\xbc\x65\xe0\xa6\x8e\x63\xcf\x19\xd0\x24\x0a\xdb\x2a\x03\x5b\xfe\xc7\x49\x37\x60\xd2\x8e\xd1\x52\x74\x5a\xc5\xd7\xa6\x48\xe7\xfc\x39\x5f\xf3\x34\x45\x22\xd1\x20\x0b\x24\x62\x0a\x7a\x54\x8a\xc9\x83\xd5\x8b\xd5\x3d\x9d\x06\xf9\xfa\x8a\xe6\x3d\x6a\x89\x7a\x2d\x29\x99\xa7\x81\xe3\x75\xce\x04\x2c\xa8\xc8\x4c\x6d\xf5\x41\x1c\x5b\xe3\xdd\x1e\xdf\xea\x06\x51\x70\x30\x0a\xd6\x80\x7e\x07\xf0\x96\xda\xd2\x09\x39\xad\x78\x62\xfc\xec\x00\x8e\x12\x5f\x98\xd2\x28\x7f\xf5\x85\x16\x80\xb0\xcb\x02\x8a\x5c\x6d\xfe\x1d\x00\x00\xff\xff\x23\xee\x9b\xaf\x6e\x11\x00\x00")

func dokupLuaBytes() ([]byte, error) {
	return bindataRead(
		_dokupLua,
		"dokup.lua",
	)
}

func dokupLua() (*asset, error) {
	bytes, err := dokupLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dokup.lua", size: 4462, mode: os.FileMode(420), modTime: time.Unix(1499777084, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dokup.lua": dokupLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dokup.lua": &bintree{dokupLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

