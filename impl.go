// Code generated by go-bindata.
// sources:
// index.js
// index2.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x55\x4d\x8f\xdb\x36\x10\xbd\xeb\x57\xcc\xea\x62\x12\x11\xd8\xe4\x6a\xd7\x0d\xda\xa2\x87\x5e\xd2\x02\x45\x4e\x86\x11\x70\xa5\x91\xcc\xac\x44\xb2\x24\xe5\x6c\xb7\x76\x7f\x7b\x41\x8a\xb4\xf5\x61\x21\xba\xc8\xe4\x9b\x79\x33\x6f\x3e\xe4\x33\x37\xf0\x4b\x2f\xda\x0a\x0d\xec\xc1\xe0\xdf\xbd\x30\x48\xf2\x4a\x95\x2f\x68\xd8\xf3\x80\xe4\x74\x97\x79\xc3\x5e\x8c\x6d\x7a\x91\xee\x25\xec\x13\x09\xfb\xa4\x9c\xa8\x45\xc9\x9d\x50\x72\x40\xb9\x69\xce\x63\xbf\x4e\x48\xd1\x09\xeb\x72\x4a\xb4\x51\x25\x5a\xcb\xbc\x09\xb3\xad\x28\x91\x7c\xa0\x91\xb4\xb6\x63\xa7\xda\xa6\x60\xb5\x86\x3d\x24\xc7\xf2\x5b\x45\x28\xbc\x83\xfc\x87\x4a\xbd\xf4\x9a\x7d\xb5\xf9\x2e\xcb\x32\x83\xae\x37\x12\x6a\xcb\xac\xe3\x8e\xd4\x9a\x66\x00\x00\xcc\x9d\x50\x92\xba\x97\xa5\xcf\x0e\x88\x07\x29\xfc\x9b\x05\xd0\x3f\x9e\x3f\x10\x8d\x42\xd7\x9a\xee\xa6\x16\x28\xbd\x9e\x06\xdd\x17\x94\x67\x42\xa7\x20\x37\xcd\xed\x2c\x6a\x20\x5e\xda\x01\xe5\xf9\x08\x97\x0b\xa4\xc3\xe1\xfd\xf1\x48\xfd\x09\xf6\xb0\x6a\x70\xa3\xc1\xd6\xe2\xc8\x98\x7d\x61\x2d\xca\xc6\x9d\xe0\x63\x3c\x1f\xde\x1f\x61\x0b\x9b\x4d\x36\x89\xfc\xf4\xf4\xf4\xdf\x61\x63\x1d\x37\x6e\x53\xc0\xc6\x3a\xa5\xfd\xdb\x60\xa7\xce\xe8\x7f\x85\xee\x6e\x8e\x4c\xc8\x0a\x5f\xff\xa8\x7d\xaa\xd4\x97\x03\x46\x4f\xa9\xa4\x55\x2d\xb2\x56\x35\x24\xff\x6c\x79\x83\xdb\x58\xa1\x1f\x2d\xf1\xd4\xf4\xe2\x89\x2f\x86\x04\x5a\x7a\x79\x26\x9e\x95\xfe\x94\xd3\x09\x4f\x6a\x18\xbe\x0a\x47\x3e\xd0\xdd\x0d\xbc\xde\x93\x8e\x5d\x33\xbd\x24\x21\x44\xe1\xe5\x15\xf7\x42\xa7\x3e\x5c\x29\x2b\xb9\x2b\x4f\xa3\x4e\xe2\x38\xef\x49\xce\x9f\x14\xa4\xd1\x00\x7c\x15\xd6\xd9\xa7\xbc\x00\x8c\x19\x5c\x3d\x67\x76\xe3\xb9\x85\x8a\x6c\xa9\x81\x4c\x1b\x55\xf5\x83\x4d\xec\x12\xd3\x34\x25\x9c\xdf\xd1\x7c\x37\xf5\xb3\x8e\x37\x42\x36\x37\x27\x7b\x77\x8a\x50\xf4\x88\xb7\x9b\x0a\xcf\xd8\x2a\xdd\xa1\x74\x9b\x5d\x76\x1d\xe5\xe6\xcb\xd2\xa9\xaa\x80\xb2\xab\x0a\x3f\x83\x29\xc9\xb4\x79\xa5\x41\xee\x30\x9e\x06\x53\x6f\x75\x2b\xcb\x7c\xfa\xe3\x72\x4f\x16\x20\x24\x2f\x85\xfb\xfc\xfb\x0d\xde\x4d\x51\xfb\x4d\xb8\xf2\x04\xa4\xec\xaa\x85\x67\x28\x3e\xb7\x18\xc4\x19\x97\x6f\x93\xac\xc8\xc5\xc2\x35\x71\xa6\xc7\x39\xed\xdd\x75\x98\xcf\xa5\xef\x70\x1f\x9c\x0b\x88\x14\x6b\xc1\x95\x7e\x14\x5b\x69\xb2\x1e\x36\x98\x2d\xbd\xc2\x9b\xac\x84\xab\xb0\xe6\x7d\xeb\xb6\x0b\x60\x31\x85\xb3\xcd\xf1\x65\x88\x7b\x13\x54\xcd\xb7\x25\x3d\xab\x5b\x03\xc3\xe6\xdc\xb7\xe8\x3b\x2b\x31\x4f\x68\xac\xe6\x4a\x27\x73\x36\x6b\x7f\x24\xf1\x9f\x36\x3d\xf8\xa4\xd2\x28\x49\x1e\x7d\xf4\x7f\x3b\xa3\x74\x05\x8c\x12\x29\xa0\x1b\xe7\xe2\xa9\xac\x33\x2b\xff\x19\x07\x3c\xfa\xef\x39\xe4\xf0\x0e\xc8\xcf\xc6\xf0\x7f\x98\xb0\xe1\x4d\x3a\x0a\x1f\xa1\x63\x1d\xd7\x23\x99\x6f\x73\x99\xb1\x81\x6f\x4c\xf2\x0e\xc7\x05\xfa\xaa\x84\x24\x39\xe4\x14\xb6\xd0\x05\xf4\x5e\xf4\x34\xd5\xcb\xa2\xf9\xe1\x90\x2c\x64\x2a\x64\xb3\x7d\x04\xfe\xe5\xdb\xb9\x06\xfe\xea\xb7\x72\xdd\x53\x69\xbd\x00\x43\xe7\x61\x0f\xbd\x60\x7f\x0e\x03\x40\x7c\xbd\x7c\x55\x18\x63\xf9\x83\x41\xd4\x43\x0e\x64\x39\x45\xcf\x06\xf9\xcb\x6e\x55\xd2\xba\x1e\x7c\x8c\x05\x39\x2b\x58\x50\x33\xc7\x62\x7a\x7d\x19\x74\xe4\x95\x92\xf8\x50\x01\xec\x41\xf6\x6d\xbb\x44\x66\x0a\xae\xe9\x3f\x20\xbb\xfe\x1f\x00\x00\xff\xff\x24\xe8\x0c\xa2\xbc\x08\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 2236, mode: os.FileMode(420), modTime: time.Unix(1478825017, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _index2Js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe2\xe2\x4a\xad\x28\xc8\x2f\x2a\x29\xd6\x4b\x2a\xcd\xcc\x49\x51\xb0\x55\x48\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\xd0\xd0\x54\xa8\xe6\xe2\x4c\xce\xcf\x2b\xce\xcf\x49\xd5\xcb\xc9\x4f\xd7\x50\x77\x0a\xf5\xf4\x71\x51\xd7\xe4\xaa\x05\x04\x00\x00\xff\xff\x10\xfd\xc0\x46\x37\x00\x00\x00")

func index2JsBytes() ([]byte, error) {
	return bindataRead(
		_index2Js,
		"index2.js",
	)
}

func index2Js() (*asset, error) {
	bytes, err := index2JsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index2.js", size: 55, mode: os.FileMode(420), modTime: time.Unix(1478824816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.js": indexJs,
	"index2.js": index2Js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"index2.js": &bintree{index2Js, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

