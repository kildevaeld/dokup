// Code generated by go-bindata.
// sources:
// index.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x5d\x6f\xd3\x30\x14\x7d\xcf\xaf\x70\xf3\x52\x47\x8b\x0c\xbc\xb6\xc0\x04\x88\x07\x5e\x06\x12\xda\x53\x55\x4d\x59\x72\xd3\x79\x4b\xec\x60\x3b\xdd\x18\x2b\xbf\x9d\x6b\xc7\x4e\x9d\x7e\x80\xf0\xa4\x64\xb9\xe7\xde\xe3\xfb\x71\xec\x6e\x0b\x45\x3e\xf6\xbc\xa9\x40\x91\x77\x44\xc1\x8f\x9e\x2b\xa0\x69\x25\xcb\x07\x50\xec\x76\x40\xd2\x6c\x99\x58\xc7\x9e\xc7\x3e\x3d\x0f\x76\x81\x66\x4f\xc2\xae\xa4\xe1\x35\x2f\x0b\xc3\xa5\x18\xd0\x42\x6d\xb6\x71\x5c\xcb\x05\x6f\xb9\x36\x69\x46\x3b\x25\x4b\xd0\x9a\x59\x17\xa6\x1b\x5e\x02\x7d\x93\x79\xd2\x5a\xc7\x41\xb5\x0e\x9b\xd5\x1d\xda\x43\x60\xf9\x58\xd1\x8c\x5c\x90\xf4\x55\x25\x1f\xfa\x8e\xdd\xeb\x74\x99\x24\x89\x02\xd3\x2b\x81\x14\x4c\x9b\xc2\xd0\xba\xcb\x12\x82\x8b\x99\x3b\x10\xb4\xee\x45\x69\xb3\x23\xd4\x82\x19\xf9\xe5\x30\xf7\xb0\xcb\xee\xe1\xc8\xa2\xed\x91\x00\x69\x63\x0f\x10\xb6\xa6\x0d\x98\x1b\xfc\x8f\x66\x53\x10\xcb\x19\xbf\x79\x4d\xa8\x2d\x6f\x85\x7e\xeb\xcc\x42\x18\x37\x1a\x46\x37\x68\x34\x44\x20\xbb\x61\x0d\x88\x8d\xb9\x23\x97\xfe\x7b\xf5\x7a\x4d\x16\x24\xc5\x94\x95\x49\xc7\xb0\xc9\x36\xb3\xd9\xec\xf7\x6a\xee\x3c\xe6\x39\xbe\x65\x87\x2f\x05\xad\xdc\xc2\x7c\xcd\xb8\xa8\xe0\xe9\x6b\x6d\x93\xc9\x42\xd1\x61\x95\x52\x68\xd9\x00\x6b\xe4\x86\xa6\xd7\xba\xd8\xc0\xc2\xf7\xe0\xad\xa3\x7b\xb1\x64\x2f\x03\xd5\xfb\x34\x9b\xc4\x86\x51\xc0\x13\x37\x38\xbd\xe5\x08\xee\xf6\x4d\xf1\xf3\x50\xbd\xa0\x8e\x36\xb7\x45\xe5\xfb\xf6\x85\xee\xee\x32\x86\xca\x29\xef\xa2\x19\x41\x9c\xeb\x24\xcf\x2b\x49\xc2\xd0\x09\x6e\xae\x8d\x9e\xa5\x39\x01\x9f\xc1\xce\x72\x26\x23\xcf\xb8\x95\x67\x0b\x63\x61\x98\x7e\xd5\x3b\x9f\x2c\xa4\x99\xee\x6d\xe9\x72\xea\x8d\xdd\xd8\x70\xb1\xd9\xbb\x7a\x83\xf7\xf3\xd6\x79\x05\x5b\x68\x64\xd7\x82\x30\xf3\x65\xb2\x8b\xf2\xb0\x2d\x68\x65\x95\x93\xb2\xc5\x07\x66\x14\x12\x0a\xe7\xa7\x54\x50\x18\xf0\x5f\x83\xab\xf5\x1a\x5b\x70\xa8\x61\x7f\x44\x2d\xcd\x64\x2c\x78\xc8\xcc\xf5\x97\x11\x5e\x4e\x51\xfd\xc8\xb1\xcd\x84\x62\x16\x87\x5a\x70\x7d\x2e\x50\x8d\x5e\x6b\x8b\x50\x95\xa7\x62\xce\x4c\x8d\xea\x21\x1a\xf6\x34\x72\x50\xca\x71\xe8\x60\x77\xb1\x39\xf9\x2b\x83\x15\xdc\xa9\xad\x65\x47\x4f\xc4\x54\x50\x17\x7d\x63\x16\x47\xc0\x91\x68\xfe\x53\xdc\x61\x9d\x15\xb9\x5d\x38\xdf\xbd\xe8\xff\xa1\xe0\xc3\x84\xe2\x0e\xec\xb2\x89\x54\x0e\x26\xe8\x49\xec\xfd\xd2\x0d\x31\xa1\x2b\x52\xd0\x53\xb7\xef\xe7\x2d\xca\x2f\x27\x51\x22\x39\x69\xe3\x5c\x2c\x95\x36\xea\xcc\xe5\xbd\x82\xb5\xbd\x58\xf1\xef\x82\xd0\x0f\x4a\x15\x3f\x19\xd7\xee\x4d\x91\xe5\x92\xb4\xac\x2d\xba\xa8\xcc\xe7\xc3\x32\xfd\xec\x9e\x99\x28\x5a\x88\x1b\x74\x2f\xb9\xa0\x48\x9c\xe1\x85\xd6\x3a\x74\xdf\xf4\x20\xcc\xe3\xa6\x59\x59\x08\xe6\x32\xc5\x03\xb7\x38\x05\x7e\xb7\xe3\x3c\x07\x7e\xb2\x07\xeb\x7c\xa4\xec\xba\x23\xd0\x4d\x1e\xdb\xd3\x73\xf6\x6d\x10\x00\xb5\xfd\xb2\x5d\x61\x8c\xa5\x27\x84\xd8\x0d\x39\xd0\x63\x15\xdd\xe2\xf6\x0f\xcb\xb3\x25\x9d\xaf\x07\x4e\x63\xae\x9c\x33\x98\xab\xe6\x10\xf3\xe9\xf5\xa5\xab\x03\x7f\xe1\x05\x9c\xac\x00\xeb\x15\x7d\xd3\x1c\x23\x07\x15\xec\xc2\x95\x9d\xec\xfe\x04\x00\x00\xff\xff\xc9\x74\x32\xfb\x45\x08\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 2117, mode: os.FileMode(420), modTime: time.Unix(1475141523, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.js": indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.js": &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

