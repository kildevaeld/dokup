// Code generated by go-bindata.
// sources:
// index.js
// index2.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x4d\x8f\xdb\x36\x10\xbd\xeb\x57\xcc\xea\x62\x12\x11\xd8\xe4\x6a\xd7\x0d\xda\xa2\x87\x5e\xd2\x02\x45\x4e\x86\x11\x70\xa5\x91\xcc\xac\x44\xb2\x24\xe5\x6c\xb7\x76\x7f\x7b\x41\x8a\xb4\xf5\x61\x21\xba\xc8\xe4\x9b\x79\x33\x6f\x3e\xe4\x33\x37\xf0\x4b\x2f\xda\x0a\x0d\xec\xc1\xe0\xdf\xbd\x30\x48\xf2\x4a\x95\x2f\x68\xd8\xf3\x80\xe4\x74\x97\x79\xc3\x5e\x8c\x6d\x7a\x91\xee\x25\xec\x13\x09\xfb\xa4\x9c\xa8\x45\xc9\x9d\x50\x72\x40\xb9\x69\xce\x63\xbf\x4e\x48\xd1\x09\xeb\x72\x4a\xb4\x51\x25\x5a\xcb\xbc\x09\xb3\xad\x28\x91\x7c\xa0\x91\xb4\xb6\x63\xa7\xda\xa6\x60\xb5\x86\x3d\x24\xc7\xf2\x5b\x45\x28\xbc\x83\xfc\x87\x4a\xbd\xf4\x9a\x7d\xb5\xf9\x2e\xcb\x0c\xba\xde\x48\xa8\x2d\xb3\x8e\x3b\x52\x6b\x9a\x01\x00\x30\x77\x42\x49\xea\x5e\x96\x3e\x39\x20\x1e\xa4\xf0\x6f\x16\x40\xff\x78\xfa\xc0\x33\x8a\x5c\x6b\xba\x9b\x5a\xa0\xf4\x72\x1a\x74\x5f\x50\x9e\x09\x9d\x82\xdc\x34\xb7\xb3\xa8\x81\x78\x65\x07\x94\xe7\x23\x5c\x2e\x90\x0e\x87\xf7\xc7\x23\xf5\x27\xd8\xc3\xaa\xc1\x8d\x06\x5b\x8b\x23\x63\xf6\x85\xb5\x28\x1b\x77\x82\x8f\xf1\x7c\x78\x7f\x84\x2d\x6c\x36\xd9\x24\xf2\xd3\xd3\xd3\x7f\x87\x8d\x75\xdc\xb8\x4d\x01\x1b\xeb\x94\xf6\x6f\x83\x9d\x3a\xa3\xff\x15\x9a\xbb\x39\x32\x21\x2b\x7c\xfd\xa3\xf6\xa9\x52\x5f\x0e\x18\x3d\xa5\x92\x56\xb5\xc8\x5a\xd5\x90\xfc\xb3\xe5\x0d\x6e\x63\x85\x7e\xb4\xc4\x53\xd3\x8b\x27\xbe\x18\x12\x68\xe9\xe5\x99\x78\x56\xfa\x53\x4e\x27\x3c\xa9\x5f\xf8\x2a\x1c\xf9\x40\x77\x37\xf0\x7a\x4f\x3a\x76\xcd\xf4\x92\x84\x10\x85\x97\x57\xdc\x0b\x9d\xfa\x70\xa5\xac\xe4\xae\x3c\x8d\x3a\x89\xe3\xbc\x27\x39\x7f\x52\x90\x26\x03\xf0\x55\x58\x67\x9f\xf2\x02\x30\x66\x70\xf5\x9c\xd9\x8d\xe7\x16\x2a\xb2\xa5\x06\x32\x6d\x54\xd5\x0f\x36\xb1\x4b\x4c\xd3\x94\x70\x7e\x47\xf3\xdd\xd4\xcf\x3a\xde\x08\xd9\xdc\x9c\xec\xdd\x29\x42\xd1\x23\xde\x6e\x2a\x3c\x63\xab\x74\x87\xd2\x6d\x76\xd9\x75\x94\x9b\x2f\x4b\xa7\xaa\x02\xca\xae\x2a\xfc\x0c\xa6\x24\xd3\xe2\x95\x06\xb9\xc3\x78\x1a\x4c\xbd\xd5\xad\x2c\xf3\xe9\x8f\xbb\x3d\x59\x80\x90\xbc\x14\xee\xf3\xef\x37\x78\x37\x45\xed\x37\xe1\xca\x13\x90\xb2\xab\x16\x9e\xa1\xf8\xdc\x62\x10\x67\x5c\xbe\x4d\xb2\x22\x17\x0b\xd7\xc4\x99\x1e\xe7\xb4\x77\xd7\x61\x3e\x97\xbe\xc3\x7d\x70\x2e\x20\x52\xac\x05\x57\xfa\x51\x6c\xa5\xc9\x7a\xd8\x60\xb6\xf4\x0a\x6f\xb2\x12\xae\xc2\x9a\xf7\xad\xdb\x2e\x80\xc5\x14\xce\x36\xc7\x97\x21\xee\x4d\x50\x35\xdf\x96\xf4\xac\x6e\x0d\x0c\x9b\x73\xdf\xa2\xef\xac\xc4\x3c\xa1\xb1\x9a\x2b\x9d\xcc\xd9\xac\xfd\x91\xc4\x7f\xda\xf4\xe0\x93\x4a\xa3\x24\x79\xf4\xcd\xff\xed\x8c\xd2\x15\x30\x4a\xa4\x80\x6e\x9c\x8b\xa7\xb2\xce\xac\xfc\x65\x1c\xf0\xe8\x3f\xe7\x90\xc3\x3b\x20\x3f\x1b\xc3\xff\x61\xc2\x86\x37\xe9\x28\x7c\x84\x8e\x75\x5c\x8f\x64\xbe\xcd\x65\xc6\x06\xbe\x31\xc9\x3b\x1c\x17\xe8\xab\x12\x92\xe4\x90\x53\xd8\x42\x17\xd0\x7b\xd1\xd3\x54\x2f\x8b\xe6\x87\x43\xb2\x90\xa9\x90\xcd\xf6\x11\xf8\x97\x6f\xe7\x1a\xf8\xab\xdf\xca\x75\x4f\xa5\xf5\x02\x0c\x9d\x87\x3d\xf4\x82\xfd\x39\x0c\x00\xf1\xf5\xf2\x55\x61\x8c\xe5\x0f\x06\x51\x0f\x39\x90\xe5\x14\x3d\x1b\xe4\x2f\xbb\x55\x49\xeb\x7a\xf0\x31\x16\xe4\xac\x60\x41\xcd\x1c\x8b\xe9\xf5\x65\xd0\x91\x57\x4a\xe2\x43\x05\xb0\x07\xd9\xb7\xed\x12\x99\x29\xb8\xa6\xff\x80\xec\xfa\x7f\x00\x00\x00\xff\xff\x55\x33\xa3\x79\xbb\x08\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 2235, mode: os.FileMode(420), modTime: time.Unix(1499276298, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _index2Js = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xe2\x4a\xad\x28\xc8\x2f\x2a\x29\xd6\x4b\x2a\xcd\xcc\x49\x51\xb0\x55\x48\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\xd0\xd0\x54\xa8\xe6\xe2\x4c\xce\xcf\x2b\xce\xcf\x49\xd5\xcb\xc9\x4f\xd7\x50\x77\x0a\xf5\xf4\x71\x51\xd7\xe4\xaa\x05\x04\x00\x00\xff\xff\x10\xfd\xc0\x46\x37\x00\x00\x00")

func index2JsBytes() ([]byte, error) {
	return bindataRead(
		_index2Js,
		"index2.js",
	)
}

func index2Js() (*asset, error) {
	bytes, err := index2JsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index2.js", size: 55, mode: os.FileMode(420), modTime: time.Unix(1498406072, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.js": indexJs,
	"index2.js": index2Js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"index2.js": &bintree{index2Js, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

